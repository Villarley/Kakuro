"""
Script de prueba para la pantalla de configuraci√≥n de Kakuro 2025.
Verifica que la configuraci√≥n se guarde y cargue correctamente.
"""

import tkinter as tk
import json
import os
from gui.config_screen import ConfigScreen


def test_config_screen():
    """Prueba la funcionalidad de la pantalla de configuraci√≥n"""
    print("üß™ Iniciando pruebas de ConfigScreen...")
    
    # Crear ventana de prueba
    root = tk.Tk()
    root.title("Test - ConfigScreen")
    root.geometry("600x800")
    
    # Crear instancia de ConfigScreen
    config_screen = ConfigScreen(root, None)
    config_screen.pack(fill="both", expand=True)
    
    print("‚úÖ ConfigScreen creada exitosamente")
    
    # Probar configuraci√≥n por defecto
    print("\nüìã Probando configuraci√≥n por defecto:")
    default_config = config_screen.get_current_config()
    print(f"   Nivel: {default_config.get('nivel', 'N/A')}")
    print(f"   Tipo de reloj: {default_config.get('tipo_reloj', 'N/A')}")
    
    # Simular cambio de configuraci√≥n
    print("\n‚öôÔ∏è Simulando cambio de configuraci√≥n...")
    config_screen.nivel_var.set("DIF√çCIL")
    config_screen.reloj_var.set("TEMPORIZADOR")
    config_screen.horas_var.set("1")
    config_screen.minutos_var.set("30")
    config_screen.segundos_var.set("0")
    
    # Obtener nueva configuraci√≥n
    new_config = config_screen.get_current_config()
    print(f"   Nuevo nivel: {new_config.get('nivel', 'N/A')}")
    print(f"   Nuevo tipo de reloj: {new_config.get('tipo_reloj', 'N/A')}")
    print(f"   Tiempo l√≠mite: {new_config.get('tiempo_limite', 'N/A')} segundos")
    
    # Probar guardado
    print("\nüíæ Probando guardado de configuraci√≥n...")
    try:
        config_screen.guardar_config()
        print("‚úÖ Configuraci√≥n guardada exitosamente")
        
        # Verificar que el archivo existe
        if os.path.exists("data/configuracion.json"):
            print("‚úÖ Archivo de configuraci√≥n creado")
            
            # Leer y mostrar configuraci√≥n guardada
            with open("data/configuracion.json", "r", encoding="utf-8") as f:
                saved_config = json.load(f)
            
            print(f"   Configuraci√≥n guardada: {saved_config}")
        else:
            print("‚ùå Archivo de configuraci√≥n no encontrado")
            
    except Exception as e:
        print(f"‚ùå Error al guardar configuraci√≥n: {e}")
    
    # Probar carga de configuraci√≥n
    print("\nüìÇ Probando carga de configuraci√≥n...")
    try:
        # Cambiar valores para simular estado diferente
        config_screen.nivel_var.set("F√ÅCIL")
        config_screen.reloj_var.set("CRON√ìMETRO")
        
        # Cargar configuraci√≥n
        config_screen.load_current_config()
        
        # Verificar que se cargaron los valores correctos
        loaded_config = config_screen.get_current_config()
        print(f"   Configuraci√≥n cargada: {loaded_config}")
        
        if loaded_config.get('nivel') == 'DIF√çCIL':
            print("‚úÖ Nivel cargado correctamente")
        else:
            print("‚ùå Error al cargar nivel")
            
        if loaded_config.get('tipo_reloj') == 'TEMPORIZADOR':
            print("‚úÖ Tipo de reloj cargado correctamente")
        else:
            print("‚ùå Error al cargar tipo de reloj")
            
    except Exception as e:
        print(f"‚ùå Error al cargar configuraci√≥n: {e}")
    
    # Probar validaciones
    print("\nüîç Probando validaciones...")
    
    # Probar tiempo negativo
    config_screen.reloj_var.set("TEMPORIZADOR")
    config_screen.horas_var.set("-1")
    config_screen.minutos_var.set("0")
    config_screen.segundos_var.set("0")
    
    print("   Probando tiempo negativo...")
    try:
        config_screen.guardar_config()
        print("‚ùå Deber√≠a haber fallado con tiempo negativo")
    except:
        print("‚úÖ Validaci√≥n de tiempo negativo funciona")
    
    # Probar minutos inv√°lidos
    config_screen.horas_var.set("0")
    config_screen.minutos_var.set("60")
    config_screen.segundos_var.set("0")
    
    print("   Probando minutos inv√°lidos...")
    try:
        config_screen.guardar_config()
        print("‚ùå Deber√≠a haber fallado con minutos inv√°lidos")
    except:
        print("‚úÖ Validaci√≥n de minutos funciona")
    
    # Probar tiempo cero
    config_screen.horas_var.set("0")
    config_screen.minutos_var.set("0")
    config_screen.segundos_var.set("0")
    
    print("   Probando tiempo cero...")
    try:
        config_screen.guardar_config()
        print("‚ùå Deber√≠a haber fallado con tiempo cero")
    except:
        print("‚úÖ Validaci√≥n de tiempo cero funciona")
    
    print("\nüéâ Pruebas completadas!")
    print("\nüí° Para probar la interfaz gr√°fica, ejecuta la aplicaci√≥n principal:")
    print("   python main.py")
    
    # Mantener ventana abierta por un momento
    root.after(3000, root.destroy)
    root.mainloop()


def test_timer_integration():
    """Prueba la integraci√≥n del temporizador con la configuraci√≥n"""
    print("\n‚è±Ô∏è Probando integraci√≥n del temporizador...")
    
    try:
        from utils.timer import GameTimer
        from logic.config_loader import load_configuracion
        
        # Cargar configuraci√≥n
        config = load_configuracion()
        print(f"   Configuraci√≥n cargada: {config}")
        
        # Crear temporizador seg√∫n configuraci√≥n
        tipo_reloj = config.get("tipo_reloj", "CRON√ìMETRO")
        tiempo_limite = config.get("tiempo_limite") if tipo_reloj == "TEMPORIZADOR" else None
        
        timer = GameTimer(time_limit=tiempo_limite)
        print(f"   Temporizador creado: tipo={tipo_reloj}, l√≠mite={tiempo_limite}")
        
        # Probar callbacks
        def on_update(tiempo):
            print(f"   Tiempo actualizado: {tiempo}s")
        
        def on_limit():
            print("   ‚è∞ ¬°Tiempo agotado!")
        
        timer.set_time_update_callback(on_update)
        timer.set_time_limit_callback(on_limit)
        
        print("‚úÖ Integraci√≥n del temporizador funciona correctamente")
        
    except Exception as e:
        print(f"‚ùå Error en integraci√≥n del temporizador: {e}")


if __name__ == "__main__":
    print("üöÄ Iniciando pruebas de configuraci√≥n de Kakuro 2025")
    print("=" * 60)
    
    # Ejecutar pruebas
    test_config_screen()
    test_timer_integration()
    
    print("\n" + "=" * 60)
    print("‚úÖ Todas las pruebas completadas") 